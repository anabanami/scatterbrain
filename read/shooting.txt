Hi guys, 
I'll try to explain it:

SUMMARY:
The shooting method is essentially just solving the ODE and trying different values of E until we find one that causes the wavefunction to not blow up at large R

wikipedia example: https://en.wikipedia.org/wiki/Shooting_method#Example

MY IMPLEMENTATION:
Since we are trying to find the eigenenergy of a solution to the ODE given a potential, the "first" step is using the whole energy range of the potential (this will be our first guess of the range where a bound state is to be found). The bounds used for this step were E_lower = -58.5 meV and E_upper = 0.
we discretise the range E from E_lower to E_upper in n evenly spaced steps.

Using this first E range we solve the ODE(iteratively: for each E value in the range) by integrating for all r.

The ODE setup:

Since our equation is second order, we recast the ODE into a first order vector equation. 

The ODE solver:

The cool thing about the shooting method is that once we have integrated over all r for a specific E_i value in the range we tell the computer to only "care" about the behaviour of the solution at our upper integration limit for r: R_max. 
Since the bound states remain small (zero) at R_max, then by the intermediate value theorem (IVT) the binding energies will be found between the energies of "solutions" that "blow-up" at R_max(positively and negatively). 

The algorithm requires that we keep track of:
    -the sign of each solution: u(R_max)
    -the energy of u(R_max)
We can store these in 2 separate lists of the same size.
(A signs list and an Energies list).

After this, we tell the computer to read the list of signs and notice the index where there is a change in sign (from positive to negative or viceversa).
We make the computer extract the corresponding (indexed) pairs of values from the Energies list and make them into a couple of upper and lower bounds to be checked:
[E_lower, E_uppper], since we know by the IVT that there is a bound solution between each of these pairs of energy values.


Now that we have found all the subsets of energy bounds for the bound states we have to iteratively scan each subset.
What we do here is unpack each of these lists [E_lower, E_upper]
define a midpoint between them: E_mid = E_mid = (E_lower + E_upper) / 2
and use E_mid to solve the ODE (once again for all r)

Just like before, we will have to keep track of the sign of the solutions at R_max.
This time we will compare these signs to the sign of the solution corresponding to E_lower and E_upper. 
IF the signs of these new solutions matches either of the signs corresponding to the solutions we had recorded THEN we set E_mid to either a new E_lower OR E_upper

In my code:
w[-1] = solution to the ODE at R_max and sign_lower is the sign of the solution with energy E_lower (from our previous solver step). 

THE CONDITIONAL STATEMENT for redefining our bounds and iteratively do the search:

        if np.sign(w[-1]) == sign_lower:
            E_lower = E_mid
        else:
            E_upper = E_mid
In order to end the loop we define an arbitrary condtion for the distance between E_upper and E_lower(ie. abs(E_upper - E_lower) > 1e-12 * meV)
Once this condition is not stisfied the Iterative search will end and we will have obtained a pretty accurate value for the binding energy.

I hope all of this made sense, please let me know If you want me to clarify something.


*******The solver uses the ICs vector :  y(0) = np.sqrt(r[0]), y'(0) = 1 / (2 * np.sqrt(r[0])). *****